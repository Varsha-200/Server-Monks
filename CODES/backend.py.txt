from flask import Flask, render_template, request, redirect, url_for, session, flash
from flask_sqlalchemy import SQLAlchemy
from flask_mail import Mail, Message
from werkzeug.security import generate_password_hash, check_password_hash
import os

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['MAIL_SERVER'] = 'smtp.example.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = 'your_email@example.com'
app.config['MAIL_PASSWORD'] = 'your_email_password'

db = SQLAlchemy(app)
mail = Mail(app)

# User model
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), nullable=False)
    password = db.Column(db.String(150), nullable=False)
    email = db.Column(db.String(150), unique=True, nullable=False)
    degree = db.Column(db.String(150))
    skills = db.Column(db.String(500))
    posted_jobs = db.relationship('Job', backref='poster', foreign_keys='Job.poster_id', lazy=True)
    booked_jobs = db.relationship('Job', backref='booker', foreign_keys='Job.booker_id', lazy=True)

# Job model
class Job(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(150), nullable=False)
    description = db.Column(db.Text, nullable=False)
    location = db.Column(db.String(150), nullable=False)
    salary = db.Column(db.Float, nullable=False)
    poster_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    booker_id = db.Column(db.Integer, db.ForeignKey('user.id'))

# Routes
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = generate_password_hash(request.form['password'])
        email = request.form['email']
        degree = request.form['degree']
        skills = request.form.getlist('skills')
        
        new_user = User(username=username, password=password, email=email, degree=degree, skills=', '.join(skills))
        
        try:
            db.session.add(new_user)
            db.session.commit()
            flash('Registration successful! Please log in.', 'success')
            return redirect(url_for('login'))
        except Exception as e:
            db.session.rollback()
            flash(str(e), 'danger')
    
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        user = User.query.filter_by(email=email).first()
        
        if user and check_password_hash(user.password, password):
            session['user_id'] = user.id
            flash('Login successful!', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('Invalid email or password', 'danger')
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('user_id', None)
    flash('You have been logged out.', 'success')
    return redirect(url_for('index'))

@app.route('/dashboard', methods=['GET', 'POST'])
def dashboard():
    if 'user_id' not in session:
        flash('Please log in to access this page', 'danger')
        return redirect(url_for('login'))

    sort_by = request.args.get('sort_by')
    search_title = request.args.get('search_title')
    min_salary = request.args.get('min_salary')
    max_salary = request.args.get('max_salary')
    search_location = request.args.get('search_location')

    query = Job.query.filter_by(booker_id=None)

    if search_title:
        query = query.filter(Job.title.ilike(f'%{search_title}%'))
    if min_salary:
        query = query.filter(Job.salary >= float(min_salary))
    if max_salary:
        query = query.filter(Job.salary <= float(max_salary))
    if search_location:
        query = query.filter(Job.location.ilike(f'%{search_location}%'))

    if sort_by:
        if sort_by == 'title':
            query = query.order_by(Job.title)
        elif sort_by == 'salary':
            query = query.order_by(Job.salary)
        elif sort_by == 'location':
            query = query.order_by(Job.location)

    jobs = query.all()

    user = User.query.get(session['user_id'])
    
    return render_template('dashboard.html', user=user, jobs=jobs)

@app.route('/post_job', methods=['GET', 'POST'])
def post_job():
    if 'user_id' not in session:
        flash('Please log in to access this page', 'danger')
        return redirect(url_for('login'))
    
    if request.method == 'POST':
        title = request.form['title']
        description = request.form['description']
        location = request.form['location']
        salary = request.form['salary']
        poster_id = session['user_id']
        
        new_job = Job(title=title, description=description, location=location, salary=float(salary), poster_id=poster_id)
        
        db.session.add(new_job)
        db.session.commit()
        
        flash('Job posted successfully!', 'success')
        return redirect(url_for('dashboard'))
    
    return render_template('post_job.html')

@app.route('/book_job/<int:job_id>', methods=['GET', 'POST'])
def book_job(job_id):
    if 'user_id' not in session:
        flash('Please log in to access this page', 'danger')
        return redirect(url_for('login'))
    
    job = Job.query.get(job_id)
    
    if request.method == 'POST':
        job.booker_id = session['user_id']
        db.session.commit()
        
        flash('Job booked successfully!', 'success')
        return redirect(url_for('dashboard'))
    
    return render_template('book_job.html', job=job, booker=job.booker)

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
